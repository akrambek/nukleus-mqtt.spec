/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

scope mqtt
{
    struct MqttBasicConnectSettings
    {
        int16 keepAlive;
        int32 sessionExpiry;
        int32 maxPacketSize;
        int16 topicAliasMax;
        int16 receiveMax;
        string authMethod;
        mqtt::MqttBinary authData;
        list<mqtt::MqttUserProperty> userProperties;
    }

    struct MqttConnectConfig
    {
        int8 flags;
        mqtt::MqttBasicConnectSettings settings;
        int8 requestRespInfo;
        int8 requestProblemInfo;
        string clientID;
    }

    struct MqttConnackConfig
    {
        mqtt::MqttBasicConnectSettings settings;
        int8 sessionPresent;
        int8 maxQoS;
        int8 retainAvailable;
        string assignedClientID;
        string reasonStr;
        int8 wildcardAvailable;
        int8 subIdAvailable;
        int8 sharedSubAvailable;
        string respInfo;
        string serverRef;
    }

    struct MqttSubscribeInfo
    {
        int16 packetID;
        list<mqtt::MqttTopicFormat> topics;
    }

    struct MqttTopicFormat
    {
        string topic;
        int8 subscriptionOptions;
    }

    struct MqttPublishPacket
    {
        int8 flags;
        int16 packetID;
        int32 messageExpiry;
        int16 topicAlias;
        string responseTopic;
        mqtt::MqttBinary correlationData;
        list<mqtt::MqttUserProperty> userProperties;
        string contentType;
        int32 payloadFormatIndicator;
        mqtt::MqttBinary payload;
    }

    struct MqttSubAckPacket
    {
        string reasonStr;
        list<mqtt::MqttUserProperty> userProperties;
        list<int8> reasonCodes;
    }

    union MqttPacketFormat switch (uint8)
    {
        case 1: mqtt::MqttConnectConfig connect;
        case 2: mqtt::MqttConnackConfig connack;
        case 3: mqtt::MqttPublishPacket publish;
        case 8: mqtt::MqttSubscribeInfo subscribe;
        case 9: mqtt::MqttSubAckPacket suback;
        case 10: list<string> topics;
        case 11: mqtt::MqttSubAckPacket unsuback;
    }

    struct MqttBinary
    {
        uint16 length;
        octets[length] bytes;
    }

    struct MqttUserProperty
    {
        string key;
        string value;
    }

    scope control
    {

    }

    scope stream
    {
        struct MqttBeginEx
        {
            uint8 packetType;
            mqtt::MqttPacketFormat content;
        }

        struct MqttDataEx
        {
            uint8 packetType;
            mqtt::MqttPacketFormat content;
        }

        struct MqttEndEx
        {
            uint8 packetType;
            mqtt::MqttPacketFormat content;
        }
    }
}
