/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

scope mqtt
{
    enum MqttPacketType
    {
        CONNECT,
        CONNACK,
        SUBSCRIBE,
        SUBACK,
        UNSUBSCRIBE,
        UNSUBACK,
        PUBLISH
    }

    struct MqttConnectConfig
    {
        int8 flags;
        int16 keepAlive;
        int32 sessionExpiry;
        int32 maxPacketSize;
        int16 topicAliasMax;
        int16 receiveMax;
        int8 requestRespInfo;
        int8 requestProblemInfo;
        list<mqtt::MqttUserProperty> userProperties;
        string authMethod;
        mqtt::MqttBinary authData;
        string clientID;
    }

    struct MqttConnackConfig
    {
            int8 sessionPresent;
            int32 sessionExpiry;
            int16 receiveMax;
            int8 maxQoS;
            int8 retainAvailable;
            int32 maxPacketSize;
            string assignedClientID;
            int16 topicAliasMax;
            string reasonStr;
            list<mqtt::MqttUserProperty> userProperties;
            int8 wildcardAvailable;
            int8 subIdAvailable;
            int8 sharedSubAvailable;
            string respInfo;
            string serverRef;
            string authMethod;
            mqtt::MqttBinary authData;
    }

    struct MqttSubscribeInfo
    {
        int16 packetID;
        list<mqtt::MqttTopicFormat> topics;
    }

    struct MqttTopicFormat
    {
        string topic;
        int8 subscriptionOptions;
    }

    struct MqttPublishPacket
    {
        int8 flags;
        int16 packetID;
        int32 messageExpiry;
        int16 topicAlias;
        string responseTopic;
        mqtt::MqttBinary correlationData;
        list<mqtt::MqttUserProperty> userProperties;
        string contentType;
        mqtt::MqttBinary payload;
    }

    union MqttPacketFormat switch (mqtt::MqttPacketType)
    {
        case CONNECT: mqtt::MqttConnectConfig connect;
        case CONNACK: mqtt::MqttConnackConfig connack;
        case SUBSCRIBE: mqtt::MqttSubscribeInfo subscribe;
        case SUBACK: list<int8> reasonCodes;
        case UNSUBSCRIBE: list<string> topics;
        case UNSUBACK: list<int8> reasonCodes;
        case PUBLISH: mqtt::MqttPublishPacket publish;
    }

    struct MqttBinary
    {
        int16 length;
        octets[length] bytes;
    }

    struct MqttUserProperty
    {
        string key;
        string value;
    }

    scope control
    {

    }

    scope stream
    {
        struct MqttBeginEx
        {
            mqtt::MqttPacketType packetType;
            mqtt::MqttPacketFormat content;
        }

        struct MqttDataEx
        {
            mqtt::MqttPacketType packetType;
            mqtt::MqttPacketFormat content;
        }

        struct MqttEndEx
        {
            mqtt::MqttPacketType packetType;
            mqtt::MqttPacketFormat content;
        }
    }
}
